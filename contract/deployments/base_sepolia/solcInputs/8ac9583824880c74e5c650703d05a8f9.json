{
  "language": "Solidity",
  "sources": {
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Duber Smart Contract\ncontract Duber {\n    //  ========= struct declarations start ============\n    struct Driver {\n        string name;\n        uint256 licenseNumber;\n        bool isActive;\n        uint256[] tripIds;\n    }\n\n    struct Trip {\n        uint256 tripId;\n        address riderAddress;\n        address driverAddress;\n        string origin;\n        string destination;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 fare;\n        TripStatus status;\n        uint256 transactionId;\n    }\n\n    enum TripStatus {\n        Created,\n        Accepted,\n        Completed,\n        Cancelled\n    }\n\n    struct Transaction {\n        uint256 transactionId;\n        uint256 tripId;\n        uint256 amount;\n        uint256 timestamp;\n    }\n    //  ========= struct declarations end ============\n\n    //  ========= mapping declarations start ============\n    mapping(address => Driver) public drivers;\n    mapping(address => uint256[]) private riders;\n    mapping(uint256 => Trip) private trips;\n    mapping(uint256 => Transaction) private transactions;\n    //  ========= mapping declarations end ============\n\n    //  ========= variable declarations start ============\n    uint256 public tripCounter;\n    uint256 public transactionCounter;\n    //  ========= variable declarations end ============\n\n    //  ========= event declarations start ============\n    event TripCreated(uint256 indexed tripId, address indexed riderAddress);\n    event TripAccepted(uint256 indexed tripId, address indexed driverAddress);\n    event TripCompleted(uint256 indexed tripId, uint256 fare);\n    event TransactionRecorded(\n        uint256 indexed transactionId,\n        uint256 indexed tripId,\n        uint256 amount\n    );\n\n    //  ========= event declarations end ==========\n\n    // ---------------------driver specific function declarations start----------------------------\n    function registerDriver(\n        string memory _name,\n        uint256 _licenseNumber\n    ) public {\n        require(\n            drivers[msg.sender].licenseNumber == 0,\n            \"Driver already registered\"\n        );\n        drivers[msg.sender] = Driver(\n            _name,\n            _licenseNumber,\n            true,\n            new uint256[](0)\n        );\n    }\n\n    function acceptTrip(uint256 _tripId) public {\n        require(drivers[msg.sender].isActive, \"Driver is not active\");\n        Trip storage trip = trips[_tripId];\n        require(trip.status == TripStatus.Created, \"Trip is not available\");\n\n        trip.driverAddress = msg.sender;\n        trip.status = TripStatus.Accepted;\n        trip.startTime = block.timestamp;\n        drivers[msg.sender].tripIds.push(_tripId);\n\n        emit TripAccepted(_tripId, msg.sender);\n    }\n\n    function completeTrip(uint256 _tripId, uint256 _fare) public {\n        Trip storage trip = trips[_tripId];\n        require(\n            trip.driverAddress == msg.sender,\n            \"Only the trip driver can complete the trip\"\n        );\n        require(trip.status == TripStatus.Accepted, \"Trip is not in progress\");\n\n        trip.endTime = block.timestamp;\n        trip.fare = _fare;\n        trip.status = TripStatus.Completed;\n\n        transactionCounter++;\n        trip.transactionId = transactionCounter;\n        transactions[transactionCounter] = Transaction(\n            transactionCounter,\n            _tripId,\n            _fare,\n            block.timestamp\n        );\n\n        emit TripCompleted(_tripId, _fare);\n        emit TransactionRecorded(transactionCounter, _tripId, _fare);\n    }\n\n    function getDriverDetails(\n        address _driverAddress\n    ) public view returns (string memory, uint256, bool) {\n        Driver memory driver = drivers[_driverAddress];\n        return (driver.name, driver.licenseNumber, driver.isActive);\n    }\n\n    function getDriverTrips() public view returns (Trip[] memory) {\n        require(\n            drivers[msg.sender].licenseNumber != 0,\n            \"Driver does not exists\"\n        );\n\n        uint256[] memory tripIdsArr = drivers[msg.sender].tripIds;\n        Trip[] memory tripsArr = new Trip[](tripIdsArr.length);\n\n        for (uint i = 0; i < tripIdsArr.length; i++) {\n            tripsArr[i] = (trips[tripIdsArr[i]]);\n        }\n\n        return tripsArr;\n    }\n\n    // ------------------------- driver specific function declarations end ----------------------------\n\n    // ------------------------- rider specific function declarations start ----------------------------\n    function createTrip(\n        string memory _origin,\n        string memory _destination\n    ) public {\n        require(\n            (drivers[msg.sender].licenseNumber == 0),\n            \"Driver cannot create a trip\"\n        );\n\n        if (riders[msg.sender].length == 0) {\n            riders[msg.sender] = new uint256[](0);\n        }\n\n        tripCounter++;\n        trips[tripCounter] = Trip(\n            tripCounter,\n            msg.sender,\n            address(0),\n            _origin,\n            _destination,\n            0,\n            0,\n            0,\n            TripStatus.Created,\n            0\n        );\n        riders[msg.sender].push(tripCounter);\n        emit TripCreated(tripCounter, msg.sender);\n    }\n\n    function getRiderTrips() public view returns (Trip[] memory) {\n        require(riders[msg.sender].length != 0, \"Rider does not exists\");\n\n        uint256[] memory tripIdsArr = riders[msg.sender];\n        Trip[] memory tripsArr = new Trip[](tripIdsArr.length);\n\n        for (uint i = 0; i < tripIdsArr.length; i++) {\n            tripsArr[i] = (trips[tripIdsArr[i]]);\n        }\n\n        return tripsArr;\n    }\n\n    // ------------------------- rider specific function declarations end ----------------------------\n\n    function getTripDetails(\n        uint256 _tripId\n    )\n        public\n        view\n        returns (\n            uint256,\n            address,\n            address,\n            string memory,\n            string memory,\n            uint256,\n            uint256,\n            uint256,\n            TripStatus,\n            uint256\n        )\n    {\n        Trip memory trip = trips[_tripId];\n        return (\n            trip.tripId,\n            trip.riderAddress,\n            trip.driverAddress,\n            trip.origin,\n            trip.destination,\n            trip.startTime,\n            trip.endTime,\n            trip.fare,\n            trip.status,\n            trip.transactionId\n        );\n    }\n\n    function getTransactionDetails(\n        uint256 _transactionId\n    ) public view returns (uint256, uint256, uint256, uint256) {\n        Transaction memory transaction = transactions[_transactionId];\n        return (\n            transaction.transactionId,\n            transaction.tripId,\n            transaction.amount,\n            transaction.timestamp\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}